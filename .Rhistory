)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
plotmap(data, "PersonenMetPersoonlijkInkomen_2")
plotmap(data, "PersonenMetPersoonlijkInkomen_2")
plotmap(data, "GemiddeldGestandaardiseerdInkomen_4")
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())          # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                 # Install missing
install.packages(to_install, dependencies = TRUE)
}
lapply(packages, require, character.only = TRUE)              # Load packages
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Clear workspace
# rm(list = ls())
### Load dependencies
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())                                # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                                       # Install missing
install.packages(to_install, dependencies = TRUE)
}
suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Plotmap function
plotmap <- function(data, df_column) {
# Check if gemeente_2024 exists and retrieve if not
if (!exists("gemeente_2024")) {
gemeente_2024 <<- cbs_get_sf(region = "gemeente", year = "2024")
}
# trim spaces in RegioS
data$RegioS <- str_trim(data$RegioS)
# Join the map with the data
map_with_data <- left_join(gemeente_2024, data, by = c("statcode" = "RegioS"))
# Transform the CRS to WGS84
map_with_data <- st_transform(map_with_data, crs = 4326)
# Ensure the column is numeric
map_with_data[[df_column]] <- as.numeric(map_with_data[[df_column]])
# Define a color palette for the interactive map
valid_values <- map_with_data[[df_column]][!is.na(map_with_data[[df_column]])]
if (length(valid_values) == 0) {
stop("The specified column contains only NA values or is missing.")
}
pal <- colorNumeric(palette = "viridis", domain = valid_values, na.color = "transparent")
# Create leaflet map
leaflet(map_with_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(df_column)),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste("Regio:", statnaam, "<br>",
df_column, ":", get(df_column)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
# plotmap(data, "PersonenMetPersoonlijkInkomen_2")
### Clear workspace
# rm(list = ls())
### Load dependencies
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())                                # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                                       # Install missing
install.packages(to_install, dependencies = TRUE)
}
suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Plotmap function
plotmap <- function(data, df_column) {
# Check if gemeente_2024 exists and retrieve if not
if (!exists("gemeente_2024")) {
gemeente_2024 <<- cbs_get_sf(region = "gemeente", year = "2024")
}
# trim spaces in RegioS
data$RegioS <- str_trim(data$RegioS)
# Join the map with the data
map_with_data <- left_join(gemeente_2024, data, by = c("statcode" = "RegioS"))
# Transform the CRS to WGS84
map_with_data <- st_transform(map_with_data, crs = 4326)
# Ensure the column is numeric
map_with_data[[df_column]] <- as.numeric(map_with_data[[df_column]])
# Define a color palette for the interactive map
valid_values <- map_with_data[[df_column]][!is.na(map_with_data[[df_column]])]
if (length(valid_values) == 0) {
stop("The specified column contains only NA values or is missing.")
}
pal <- colorNumeric(palette = "viridis", domain = valid_values, na.color = "transparent")
# Create leaflet map
leaflet(map_with_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(df_column)),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste("Regio:", statnaam, "<br>",
df_column, ":", get(df_column)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
# plotmap(data, "PersonenMetPersoonlijkInkomen_2")
### Clear workspace
# rm(list = ls())
### Load dependencies
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())                                # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                                       # Install missing
install.packages(to_install, dependencies = TRUE)
}
suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Plotmap function
plotmap <- function(data, df_column) {
# Check if gemeente_2024 exists and retrieve if not
if (!exists("gemeente_2024")) {
gemeente_2024 <<- cbs_get_sf(region = "gemeente", year = "2024")
}
# trim spaces in RegioS
data$RegioS <- str_trim(data$RegioS)
# Join the map with the data
map_with_data <- left_join(gemeente_2024, data, by = c("statcode" = "RegioS"))
# Transform the CRS to WGS84
map_with_data <- st_transform(map_with_data, crs = 4326)
# Ensure the column is numeric
map_with_data[[df_column]] <- as.numeric(map_with_data[[df_column]])
# Define a color palette for the interactive map
valid_values <- map_with_data[[df_column]][!is.na(map_with_data[[df_column]])]
if (length(valid_values) == 0) {
stop("The specified column contains only NA values or is missing.")
}
pal <- colorNumeric(palette = "viridis", domain = valid_values, na.color = "transparent")
# Create leaflet map
leaflet(map_with_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(df_column)),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste("Regio:", statnaam, "<br>",
df_column, ":", get(df_column)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
# plotmap(data, "PersonenMetPersoonlijkInkomen_2")
### Load data
data_rijvoertuigen <- read.csv2(file = "data_rijvoertuigen.csv", sep=",")
getwd()
### Clear workspace
# rm(list = ls())
### Load dependencies
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())                                # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                                       # Install missing
install.packages(to_install, dependencies = TRUE)
}
suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Plotmap function
plotmap <- function(data, df_column) {
# Check if gemeente_2024 exists and retrieve if not
if (!exists("gemeente_2024")) {
gemeente_2024 <<- cbs_get_sf(region = "gemeente", year = "2024")
}
# trim spaces in RegioS
data$RegioS <- str_trim(data$RegioS)
# Join the map with the data
map_with_data <- left_join(gemeente_2024, data, by = c("statcode" = "RegioS"))
# Transform the CRS to WGS84
map_with_data <- st_transform(map_with_data, crs = 4326)
# Ensure the column is numeric
map_with_data[[df_column]] <- as.numeric(map_with_data[[df_column]])
# Define a color palette for the interactive map
valid_values <- map_with_data[[df_column]][!is.na(map_with_data[[df_column]])]
if (length(valid_values) == 0) {
stop("The specified column contains only NA values or is missing.")
}
pal <- colorNumeric(palette = "viridis", domain = valid_values, na.color = "transparent")
# Create leaflet map
leaflet(map_with_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(df_column)),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste("Regio:", statnaam, "<br>",
df_column, ":", get(df_column)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
# plotmap(data, "PersonenMetPersoonlijkInkomen_2")
### Load data
data_rijvoertuigen <- read.csv2(file = "Data/data_rijvoertuigen.csv", sep=",")
data_inkomen <- read.csv2(file = "Data/data_inkomen.csv", sep=",")
data <- data_inkomen %>%
filter(Persoonskenmerken == "Totaal")
plotmap(data, "PersonenMetPersoonlijkInkomen_2")
plotmap(data, "GemiddeldGestandaardiseerdInkomen_4")
saveRDS(gemeente_2024, file = "gemeente_2024.rds")
rm(gemeente_2024)
gemeente_2024 <- readRDS("gemeente_2024.rds")
data <- data_inkomen %>%
filter(Persoonskenmerken == "Totaal")
plotmap(data, "PersonenMetPersoonlijkInkomen_2")
plotmap(data, "GemiddeldGestandaardiseerdInkomen_4")
View(data_rijvoertuigen)
View(data_rijvoertuigen)
rm(data)
### Clear workspace
# rm(list = ls())
### Load dependencies
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())                                # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                                       # Install missing
install.packages(to_install, dependencies = TRUE)
}
suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Plotmap function
plotmap <- function(data, df_column) {
# Check if gemeente_2024 exists and retrieve if not
if (!exists("gemeente_2024")) {
gemeente_2024 <<- cbs_get_sf(region = "gemeente", year = "2024")
}
# trim spaces in RegioS
data$RegioS <- str_trim(data$RegioS)
# Join the map with the data
map_with_data <- left_join(gemeente_2024, data, by = c("statcode" = "RegioS"))
# Transform the CRS to WGS84
map_with_data <- st_transform(map_with_data, crs = 4326)
# Ensure the column is numeric
map_with_data[[df_column]] <- as.numeric(map_with_data[[df_column]])
# Define a color palette for the interactive map
valid_values <- map_with_data[[df_column]][!is.na(map_with_data[[df_column]])]
if (length(valid_values) == 0) {
stop("The specified column contains only NA values or is missing.")
}
pal <- colorNumeric(palette = "viridis", domain = valid_values, na.color = "transparent")
# Create leaflet map
leaflet(map_with_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(df_column)),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste("Regio:", statnaam, "<br>",
df_column, ":", get(df_column)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
# plotmap(data, "PersonenMetPersoonlijkInkomen_2")
### Load data
data_rijvoertuigen <- read.csv2(file = "Data/data_rijvoertuigen.csv", sep=",")
data_inkomen <- read.csv2(file = "Data/data_inkomen.csv", sep=",")
gemeente_2024 <- readRDS("Data/gemeente_2024.rds")
data <- cbs_get_data("85236NED", Perioden = "2022JJ00", RegioS=has_substring("GM"))
data <- cbs_get_data("85236NED", Perioden = "2022JJ00", RegioS=has_substring("GM"))
View(data)
View(data_inkomen)
write.csv(data, file = "Data/data_rijvoerguigen_GM.csv", row.names = FALSE)
### Clear workspace
# rm(list = ls())
### Load dependencies
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())                                # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                                       # Install missing
install.packages(to_install, dependencies = TRUE)
}
suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Plotmap function
plotmap <- function(data, df_column) {
# Check if gemeente_2024 exists and retrieve if not
if (!exists("gemeente_2024")) {
gemeente_2024 <<- cbs_get_sf(region = "gemeente", year = "2024")
}
# trim spaces in RegioS
data$RegioS <- str_trim(data$RegioS)
# Join the map with the data
map_with_data <- left_join(gemeente_2024, data, by = c("statcode" = "RegioS"))
# Transform the CRS to WGS84
map_with_data <- st_transform(map_with_data, crs = 4326)
# Ensure the column is numeric
map_with_data[[df_column]] <- as.numeric(map_with_data[[df_column]])
# Define a color palette for the interactive map
valid_values <- map_with_data[[df_column]][!is.na(map_with_data[[df_column]])]
if (length(valid_values) == 0) {
stop("The specified column contains only NA values or is missing.")
}
pal <- colorNumeric(palette = "viridis", domain = valid_values, na.color = "transparent")
# Create leaflet map
leaflet(map_with_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(df_column)),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste("Regio:", statnaam, "<br>",
df_column, ":", get(df_column)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
# plotmap(data, "PersonenMetPersoonlijkInkomen_2")
### Load data
data_rijvoertuigen <- read.csv2(file = "Data/data_rijvoertuigen.csv", sep=",")
data_rijvoertuigen_GM <- read.csv2(file = "Data/data_rijvoertuigen_GM.csv", sep=",")
### Clear workspace
# rm(list = ls())
### Load dependencies
install_and_load <- function(packages) {
installed_packages <- rownames(installed.packages())                                # Check installed packages
to_install <- packages[!(packages %in% installed_packages)]
if (length(to_install) > 0) {                                                       # Install missing
install.packages(to_install, dependencies = TRUE)
}
suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("cbsodataR", "tidyverse", "sf", "dplyr", "leaflet"))
### Plotmap function
plotmap <- function(data, df_column) {
# Check if gemeente_2024 exists and retrieve if not
if (!exists("gemeente_2024")) {
gemeente_2024 <<- cbs_get_sf(region = "gemeente", year = "2024")
}
# trim spaces in RegioS
data$RegioS <- str_trim(data$RegioS)
# Join the map with the data
map_with_data <- left_join(gemeente_2024, data, by = c("statcode" = "RegioS"))
# Transform the CRS to WGS84
map_with_data <- st_transform(map_with_data, crs = 4326)
# Ensure the column is numeric
map_with_data[[df_column]] <- as.numeric(map_with_data[[df_column]])
# Define a color palette for the interactive map
valid_values <- map_with_data[[df_column]][!is.na(map_with_data[[df_column]])]
if (length(valid_values) == 0) {
stop("The specified column contains only NA values or is missing.")
}
pal <- colorNumeric(palette = "viridis", domain = valid_values, na.color = "transparent")
# Create leaflet map
leaflet(map_with_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(df_column)),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste("Regio:", statnaam, "<br>",
df_column, ":", get(df_column)),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = pal, values = valid_values, opacity = 0.7, title = df_column,
position = "bottomright")
}
# Example usage:
# Assuming data is your dataframe and "PersonenMetPersoonlijkInkomen_2" is the column you want to plot
# plotmap(data, "PersonenMetPersoonlijkInkomen_2")
### Load data
data_rijvoertuigen <- read.csv2(file = "Data/data_rijvoertuigen.csv", sep=",")
data_rijvoertuigen_GM <- read.csv2(file = "Data/data_rijvoertuigen_GM.csv", sep=",")
data_inkomen <- read.csv2(file = "Data/data_inkomen.csv", sep=",")
gemeente_2024 <- readRDS("Data/gemeente_2024.rds")
rm(data)
View(data_rijvoertuigen_GM)
plotmap(data_rijvoertuigen_GM, "TotaalWegvoertuigen_1")
metadata <- cbs_get_meta("85243NED")
head(metadata)
data <- cbs_get_data("85243NED", Perioden = "2024JJ00", RegioS=has_substring("GM"))
View(data)
write.csv(data, file = "Data/aantal_motorrijtuig_leeftijd.csv", row.names = FALSE)
data <- cbs_get_data("	85249NED", Perioden = "2024JJ00", RegioS=has_substring("GM"))
data <- cbs_get_data("85249NED", Perioden = "2024JJ00", RegioS=has_substring("GM"))
data <- cbs_get_data("85249NED", Perioden = "2023JJ00", RegioS=has_substring("GM"))
data <- cbs_get_data("83488NED", Perioden = "2023JJ00", RegioS=has_substring("GM"))
data <- cbs_get_data("83488NED", Perioden = "2023JJ00", RegioS=has_substring("PV"))
View(data)
write.csv(data, file = "Data/rijbewijs_leeftijd_PV.csv", row.names = FALSE)
